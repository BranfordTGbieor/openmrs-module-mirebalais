<?xml version="1.0" encoding="UTF-8"?>
 
<databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog/1.9"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog/1.9
                  http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-1.9.xsd">

    <changeSet id="20130204-true-false-concept-uuids" author="djazayeri">
        <comment>
            Setting the UUIDs for the automatically-generated 'true' and 'false' concepts to match those used by PIH broadly
        </comment>
        <update tableName="concept">
            <column name="uuid" value="3cd6f600-26fe-102b-80cb-0017a47871b2" />
            <where>concept_id = 1</where>
        </update>
        <update tableName="concept">
            <column name="uuid" value="3cd6f86c-26fe-102b-80cb-0017a47871b2" />
            <where>concept_id = 2</where>
        </update>
    </changeSet>

    <changeSet id="20140225-set-obs-datetime-to-encounter-datetime" author="djazayeri">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="0">
                select count(*) from global_property where property = 'mirebalais.UHM-1065.setObsDatetimeToEncounterDatetime'
            </sqlCheck>
        </preConditions>
        <comment>
            See UHM-1065.
            In our present information model, all Obs.obsDatetime should be equal to Obs.encounter.encounterDatetime,
            however due to a bug, 2/3 of obs are stored with the wrong datetime (though the vast majority are off by
            less than a day).
            This changeset is written so it gets run only one time, in case in the future we change our information
            model to include obs whose datatime is not equal to the encounter they are in (e.g. a form that captures
            multiple past lab results, each with its own date).
        </comment>
        <sql>
            update obs o, encounter e
            set o.obs_datetime = e.encounter_datetime
            where o.encounter_id = e.encounter_id
              and o.obs_datetime != e.encounter_datetime
        </sql>
    </changeSet>

    <changeSet id="20140408-delete-person-attributes-with-value-false" author="djazayeri">
        <comment>
            See UHM-1230: With UHM-1220 the code fix was made to correctly store phone numbers when entered as blank.
            Prior to that ticket, they were being stored as "false" in the database.
            In all of the environments (including production) there are several instances of them being false as a
            result of this bug. This changeset removes all person_attributes with value = false
        </comment>
        <delete tableName="person_attribute">
            <where>value='false'</where>
        </delete>
    </changeSet>

    <changeSet id="20140429-update-preferred-address" author="mgoodrich">
        <comment>
            See UHM-1283. Make sure no patient has more than one preferred address
            First query finds a list of all person_address_ids for persons that have more than one preferred address.
            The second query does the same, *except* that it only records a single person_address_id for each patient--
            the one with the lowest value.
            Third query updates sets preferred=0 for all person_addresses in the first set but not in the second set.
        </comment>
        <sql>
            CREATE TEMPORARY TABLE IF NOT EXISTS pa1 AS SELECT DISTINCT a.person_address_id AS person_address_id
            FROM person_address AS a, person_address AS b WHERE a.person_id = b.person_id
            AND a.preferred = 1 AND b.preferred = 1
            AND a.person_address_id != b.person_address_id;

            CREATE TEMPORARY TABLE IF NOT EXISTS pa2 AS SELECT MIN(a.person_address_id) AS person_address_id
            FROM person_address AS a, person_address AS b WHERE a.person_id = b.person_id
            AND a.person_address_id != b.person_address_id
            AND a.preferred = 1 AND b.preferred = 1
            GROUP By a.person_id;

            UPDATE person_address SET preferred = 0 WHERE person_address_id IN
            (SELECT person_address_id FROM pa1 WHERE person_address_id NOT IN (SELECT person_address_id FROM pa2));
        </sql>
    </changeSet>

    <!--<changeSet id="20140731-give-all-users-role-to-view-patient-search" author="djazayeri">-->
        <!--<comment>-->
            <!--See UHM-1500: create script to enable Patient Medical Information for all users-->
            <!--We are rolling out a change where to view the patient dashboard, a user will need to-->
            <!--have a new role "Application Role: patientMedicalInformation".  We will use this role-->
            <!--to limit who can view the patient dashboard.  But, to start, we want all existing users-->
            <!--to have this role-->
        <!--</comment>-->
        <!--<sql>-->
            <!--DELETE FROM user_role WHERE role='Application Role: patientMedicalInformation';-->
            <!--INSERT INTO user_role (user_id, role) SELECT user_id, 'Application Role: patientMedicalInformation'-->
            <!--FROM users WHERE retired = 0 AND username !='scheduler' AND username !='daemon' AND username !='pacsintegration';-->
        <!--</sql>-->
    <!--</changeSet>-->

    <changeSet id="20141201-void-duplicate-discharge-encounters-1" author="mgoodrich">
        <comment>
            See UHM-1705. Void any duplicate discharge encounters (note doesn't handle triplicates or greater,etc)
            (There are no obs in transfer encounters, so we don't worry about voiding obs)
        </comment>
        <sql>
            CREATE TEMPORARY TABLE IF NOT EXISTS discharge_encounters_to_void AS select MAX(encounter_id) AS encounter_id FROM encounter
            WHERE encounter_type = (SELECT encounter_type_id FROM encounter_type WHERE uuid = 'b6631959-2105-49dd-b154-e1249e0fbcd7')
            AND voided = 0
            GROUP BY patient_id, visit_id, encounter_type, encounter_datetime, creator, date_created HAVING (count(*)>1);

            UPDATE encounter_provider SET voided = 1, voided_by = (SELECT user_id FROM users WHERE system_id='admin'), date_voided = NOW(), void_reason = 'duplicate voided by changeset 20141201-void-duplicate-transfer-encounters-1 (UHM-1705)'
            WHERE encounter_id IN (SELECT encounter_id FROM discharge_encounters_to_void);

            UPDATE encounter SET voided = 1, voided_by = (SELECT user_id FROM users WHERE system_id='admin'), date_voided = NOW(), void_reason = 'duplicate voided by changeset 20141201-void-duplicate-transfer-encounters-1 (UHM-1705)'
            WHERE encounter_id IN (SELECT encounter_id FROM discharge_encounters_to_void);
        </sql>
    </changeSet>


    <changeSet id="20141201-void-duplicate-transfer-encounters-1" author="mgoodrich">
        <comment>
            See UHM-1705. Void any duplicate transfer encounters (note doesn't handle triplicates or greater,etc)
            (There are no obs in transfer encounters, so we don't worry about voiding obs)
        </comment>
        <sql>
            CREATE TEMPORARY TABLE IF NOT EXISTS transfer_encounters_to_void AS select MAX(encounter_id) AS encounter_id FROM encounter
            WHERE encounter_type = (SELECT encounter_type_id FROM encounter_type WHERE uuid = '436cfe33-6b81-40ef-a455-f134a9f7e580')
            AND voided = 0
            GROUP BY patient_id, visit_id, encounter_type, encounter_datetime, creator, date_created HAVING (count(*)>1);

            UPDATE encounter_provider SET voided = 1, voided_by = (SELECT user_id FROM users WHERE system_id='admin'), date_voided = NOW(), void_reason = 'duplicate voided by changeset 20141201-void-duplicate-discharge-encounters-1 (UHM-1705)'
            WHERE encounter_id IN (SELECT encounter_id FROM transfer_encounters_to_void);

            UPDATE encounter SET voided = 1, voided_by = (SELECT user_id FROM users WHERE system_id='admin'), date_voided = NOW(), void_reason = 'duplicate voided by changeset 20141201-void-duplicate-discharge-encounters-1 (UHM-1705)'
            WHERE encounter_id IN (SELECT encounter_id FROM transfer_encounters_to_void);
        </sql>
    </changeSet>

</databaseChangeLog>